package jp.co.thcomp.http_abstract_layer;

import android.content.Context;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.List;

import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okio.BufferedSink;

class URLConnectionApiAccessLayer extends ApiAccessLayer {
    protected URLConnectionApiAccessLayer(Context context) {
        super(context);
    }

    @Override
    public boolean get() {
        HttpURLConnection connection = createUrlConnection(MethodType.GET);
        mClient.newCall(request).enqueue(mCallback);
        return true;
    }

    @Override
    public boolean post() {
        Request request = createRequest(MethodType.POST);
        mClient.newCall(request).enqueue(mCallback);
        return true;
    }

    private HttpURLConnection createUrlConnection(MethodType methodType){
        HttpURLConnection ret = null;
        StringBuilder uriBuilder = new StringBuilder(mUri.toString());

        if (MethodType.GET.equals(methodType)){
            uriBuilder.append(createUriParameters());
        }
        URL url = null;
        try {
            url = new URL(uriBuilder.toString());
        } catch (MalformedURLException e) {
        }

        if(url != null){
            try {
                ret = (HttpURLConnection)url.openConnection();
            } catch (IOException e) {
            }
        }

        if(ret != null){
            for(RequestHeader header : mHeaderList){
                ret.addRequestProperty(header.mName, header.mValue);
            }
        }

        return ret;
    }

    private RequestBody createRequestBody(MethodType methodType){
        RequestBody ret = null;

        if(MethodType.POST.equals(methodType)) {
            int parameterSize = mParameterList.size();

            if(parameterSize > 1){
                // multipart
                ret = new MultiPartRequestBody(mParameterList);
            }else if(parameterSize == 1){
                ret = new SinglePartRequestBody(mParameterList.get(0));
            }
        }

        return ret;
    }

    private okhttp3.Callback mCallback = new okhttp3.Callback() {
        @Override
        public void onFailure(okhttp3.Call call, IOException e) {

        }

        @Override
        public void onResponse(okhttp3.Call call, Response response) throws IOException {

        }
    };

    private static class SinglePartRequestBody extends RequestBody{
        private RequestParameter mTargetRequestParameter;

        public SinglePartRequestBody(RequestParameter requestParameter){
            mTargetRequestParameter = requestParameter;
        }

        @Override
        public MediaType contentType() {
            return MediaType.parse(mTargetRequestParameter.getMimeType());
        }

        @Override
        public void writeTo(BufferedSink sink) throws IOException {
            boolean readAgain = true;

            while(readAgain){
                ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                readAgain = mTargetRequestParameter.output(outputStream);
                if(readAgain){
                    sink.write(outputStream.toByteArray());
                }
            }
        }
    }

    private static class MultiPartRequestBody extends RequestBody{
        private static final String MultipartBoundary = "Boundary0123456789";
        private static final String MultipartBoundaryPrefix = "------";
        private static final String MultipartBoundarySuffix = "--";
        private static final byte[] MultipartCRLF = new byte[]{0x0D, 0x0A};
        private static final String MultipartDQuote = "\"";
        private static final String MultipartSemiColon = ";";
        private static final String MultipartContentDisposition = "Content-Disposition: form-data;";
        private static final String MultipartCD_FileName = "filename=";
        private static final String MultipartCD_Name = "name=";
        private static final String MultipartContentType = "Content-Type: ";
        private static final String MultipartCT_OctetStream = "application/octet-stream";

        private List<RequestParameter> mRequestParameterList;

        public MultiPartRequestBody(List<RequestParameter> requestParameterList){
            mRequestParameterList = requestParameterList;
        }

        @Override
        public MediaType contentType() {
            return MediaType.parse("multipart/form-data; boundary=----" + MultipartBoundary);
        }

        @Override
        public void writeTo(BufferedSink sink) throws IOException {
            /**
             Set<Map.Entry<String, Object>> entrySet = mParamMap.entrySet();
             Iterator<Map.Entry<String, Object>> iterator = entrySet.iterator();
             while(iterator.hasNext()){
             Map.Entry<String, Object> entry = iterator.next();
             outputMultipartParam(outStream, entry.getKey(), entry.getValue());
             }
             outStream.write(MultipartBoundaryPrefix.getBytes());
             outStream.write(MultipartBoundary.getBytes());
             outStream.write(MultipartBoundarySuffix.getBytes());
             outStream.write(MultipartCRLF);
             outStream.flush();
             */
        }

        private void outputMultipartParam(BufferedSink outputSink, RequestParameter parameter){
            try {
                outputSink.write(MultipartBoundaryPrefix.getBytes());
                outputSink.write(MultipartBoundary.getBytes());
                outputSink.write(MultipartCRLF);
                outputSink.write(MultipartContentDisposition.getBytes());
                outputSink.write(MultipartCD_Name.getBytes());
                outputSink.write(MultipartDQuote.getBytes());
                outputSink.write(parameter.name().getBytes());
                outputSink.write(MultipartDQuote.getBytes());
            } catch (IOException e) {
            }

            try {
                if (parameter instanceof FileRequestParameter) {
                    FileRequestParameter fileParameter = (FileRequestParameter)parameter;

                    // output file
                    outputSink.write(MultipartSemiColon.getBytes());
                    outputSink.write(MultipartCD_FileName.getBytes());
                    outputSink.write(MultipartDQuote.getBytes());
                    outputSink.write(fileParameter.getFileName().getBytes());
                    outputSink.write(MultipartDQuote.getBytes());
                    outputSink.write(MultipartCRLF);
                    outputSink.write(MultipartContentType.getBytes());
                    outputSink.write(fileParameter.getMimeType().getBytes());
                    outputSink.write(MultipartCRLF);
                    outputSink.write(MultipartCRLF);

                    boolean readAgain = true;

                    while(readAgain){
                        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
                        readAgain = fileParameter.output(outputStream);
                        if(readAgain){
                            outputSink.write(outputStream.toByteArray());
                        }
                    }

                    outputSink.write(MultipartCRLF);
                } else {
                    outputSink.write(MultipartCRLF);
                    outputSink.write(MultipartCRLF);

                    String value = getStringParameter(parameter);
                    if(value != null && value.length() > 0) {
                        outputSink.write(value.getBytes());
                    }
                    outputSink.write(MultipartCRLF);
                }
            } catch (IOException e) {
            }
        }
    }
}
